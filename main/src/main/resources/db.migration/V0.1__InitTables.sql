CREATE TABLE counters
(
    id    INTEGER NOT NULL,
    count BIGINT  NOT NULL,
    CONSTRAINT pk_counters PRIMARY KEY (id)
);

CREATE TABLE materials
(
    id                                   INTEGER          NOT NULL,
    voxel_material                       INTEGER          NOT NULL,
    burnt_material_id                    INTEGER,
    density                              DOUBLE PRECISION NOT NULL,
    base_temperature                     DOUBLE PRECISION NOT NULL,
    thermal_conductivity_coefficient     DOUBLE PRECISION NOT NULL,
    convection_heat_transfer_coefficient DOUBLE PRECISION NOT NULL,
    specific_heat_capacity               DOUBLE PRECISION NOT NULL,
    flash_point_temperature              DOUBLE PRECISION NOT NULL,
    burning_time                         DOUBLE PRECISION NOT NULL,
    generated_energy_during_burning      DOUBLE PRECISION NOT NULL,
    CONSTRAINT pk_material PRIMARY KEY (id)
);

CREATE TABLE plane_voxels
(
    plane_id    INTEGER NOT NULL,
    voxel_key_x INTEGER NOT NULL,
    voxel_key_y INTEGER NOT NULL,
    voxel_key_z INTEGER NOT NULL,
    CONSTRAINT pk_plane_voxels PRIMARY KEY (plane_id, voxel_key_x, voxel_key_y, voxel_key_z)
);

CREATE TABLE planes_connections
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    parent_plane_id INTEGER,
    child_id        INTEGER,
    view_factor     DOUBLE PRECISION                         NOT NULL,
    q_net           DOUBLE PRECISION                         NOT NULL,
    CONSTRAINT pk_planes_connections PRIMARY KEY (id)
);

CREATE TABLE radiation_plane
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    area DOUBLE PRECISION                         NOT NULL,
    CONSTRAINT pk_radiationplane PRIMARY KEY (id)
);

CREATE TABLE simulation
(
    id            UUID    NOT NULL,
    name          VARCHAR(255),
    simulation_id UUID,
    creation_date TIMESTAMP WITHOUT TIME ZONE,
    sizex         INTEGER NOT NULL,
    sizey         INTEGER NOT NULL,
    sizez         INTEGER NOT NULL,
    CONSTRAINT pk_simulation PRIMARY KEY (id)
);

CREATE TABLE single_model
(
    id         UUID NOT NULL,
    name       VARCHAR(255),
    scale      INTEGER,
    position_x INTEGER,
    position_y INTEGER,
    position_z INTEGER,
    center_x   BOOLEAN,
    center_y   BOOLEAN,
    center_z   BOOLEAN,
    flip_x     BOOLEAN,
    flip_y     BOOLEAN,
    flip_z     BOOLEAN,
    rotate_x   INTEGER,
    rotate_y   INTEGER,
    rotate_z   INTEGER,
    parent_id  UUID,
    CONSTRAINT pk_single_model PRIMARY KEY (id)
);

CREATE TABLE virtual_thermometer
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    measurements VARCHAR(255),
    x            INTEGER,
    y            INTEGER,
    z            INTEGER,
    CONSTRAINT pk_virtualthermometer PRIMARY KEY (id)
);

CREATE TABLE voxels
(
    even_iteration_number      INTEGER          NOT NULL,
    even_iteration_material_id INTEGER,
    even_iteration_temperature DOUBLE PRECISION NOT NULL,
    odd_iteration_number       INTEGER          NOT NULL,
    odd_iteration_material_id  INTEGER,
    odd_iteration_temperature  DOUBLE PRECISION NOT NULL,
    is_boundary_condition      BOOLEAN          NOT NULL,
    x                          INTEGER          NOT NULL,
    y                          INTEGER          NOT NULL,
    z                          INTEGER          NOT NULL,
    CONSTRAINT pk_voxels PRIMARY KEY (x, y, z)
);

ALTER TABLE plane_voxels
    ADD CONSTRAINT uc_plane_voxels_vokexvokeyvokez UNIQUE (voxel_key_x, voxel_key_y, voxel_key_z);

CREATE INDEX x ON voxels (x);

CREATE UNIQUE INDEX xyz_even ON voxels (x, y, z, even_iteration_number);

CREATE UNIQUE INDEX xyz_odd ON voxels (x, y, z, odd_iteration_number);

CREATE INDEX y ON voxels (y);

CREATE INDEX z ON voxels (z);

ALTER TABLE materials
    ADD CONSTRAINT FK_MATERIAL_ON_BURNTMATERIAL FOREIGN KEY (burnt_material_id) REFERENCES materials (id);

ALTER TABLE planes_connections
    ADD CONSTRAINT FK_PLANES_CONNECTIONS_ON_CHILD FOREIGN KEY (child_id) REFERENCES radiation_plane (id);

ALTER TABLE planes_connections
    ADD CONSTRAINT FK_PLANES_CONNECTIONS_ON_PARENTPLANE FOREIGN KEY (parent_plane_id) REFERENCES radiation_plane (id);

ALTER TABLE simulation
    ADD CONSTRAINT FK_SIMULATION_ON_SIMULATIONID FOREIGN KEY (simulation_id) REFERENCES single_model (id);

ALTER TABLE voxels
    ADD CONSTRAINT FK_VOXELS_ON_EVENITERATIONMATERIAL FOREIGN KEY (even_iteration_material_id) REFERENCES materials (id);

ALTER TABLE voxels
    ADD CONSTRAINT FK_VOXELS_ON_ODDITERATIONMATERIAL FOREIGN KEY (odd_iteration_material_id) REFERENCES materials (id);

ALTER TABLE plane_voxels
    ADD CONSTRAINT fk_plavox_on_radiation_plane FOREIGN KEY (plane_id) REFERENCES radiation_plane (id);

ALTER TABLE plane_voxels
    ADD CONSTRAINT fk_plavox_on_voxel FOREIGN KEY (voxel_key_x, voxel_key_y, voxel_key_z) REFERENCES voxels (x, y, z);

CREATE
OR REPLACE FUNCTION update_temperatures(iteration integer, volume float) RETURNS VOID AS
$$
DECLARE
pc_id                        integer;
    pc_child_id                  integer;
    pc_q_net                     numeric;
    v_even_iteration_temperature numeric;
    m_density                    numeric;
    m_specific_heat_capacity     numeric;
    voxels_count                 integer;
    v_x integer; v_y integer; v_z integer;

    temp_increase                numeric;
BEGIN
    IF iteration % 2 = 0 THEN -- even
        FOR pc_id, pc_q_net, pc_child_id IN (SELECT pc.id, pc.q_net, pc.child_id
                                             FROM planes_connections pc
                                             where pc.q_net > 0.0)
            LOOP
                FOR v_x, v_y, v_z, v_even_iteration_temperature, m_density, m_specific_heat_capacity, voxels_count IN
                    (SELECT v.x, v.y, v.z, v.even_iteration_temperature, m.density, m.specific_heat_capacity, count(v)
                     from voxels v
                              join materials m on m.id = v.even_iteration_material_id
                     where (v.x, v.y, v.z) in
                           (select (voxel_key_x, voxel_key_y, voxel_key_z)
                            from plane_voxels
                            where plane_id = pc_child_id))
                    LOOP
                        temp_increase := pc_q_net / (volume * m_density * m_specific_heat_capacity * voxels_count);
UPDATE voxels v
SET even_iteration_temperature = v.even_iteration_temperature + temp_increase
WHERE (x, y, z) = (v_x, v_y, v_z);
END LOOP;
END LOOP;
ELSE -- odd
        FOR pc_id, pc_q_net, pc_child_id IN (SELECT pc.id, pc.q_net, pc.child_id
                                             FROM planes_connections pc
                                             where pc.q_net > 0.0)
            LOOP
                FOR v_x, v_y, v_z, v_even_iteration_temperature, m_density, m_specific_heat_capacity, voxels_count IN
                    (SELECT v.x, v.y, v.z, v.odd_iteration_temperature, m.density, m.specific_heat_capacity, count(v)
                     from voxels v
                              join materials m on m.id = v.even_iteration_material_id
                     where (v.x, v.y, v.z) in
                           (select (voxel_key_x, voxel_key_y, voxel_key_z)
                            from plane_voxels
                            where plane_id = pc_child_id))
                    LOOP
                        temp_increase := pc_q_net / (volume * m_density * m_specific_heat_capacity * voxels_count);
UPDATE voxels v
SET odd_iteration_temperature = v.odd_iteration_temperature + temp_increase
WHERE (x, y, z) = (v_x, v_y, v_z);
END LOOP;
END LOOP;
END IF;
END;
$$ LANGUAGE plpgsql;